name: CI/CD for Spring Boot with Docker (ECS Fargate)

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Build Spring Boot Application
        run: ./gradlew build -x test

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2  # 서울 리전 설정

      - name: Log in to AWS ECR (ap-northeast-2)
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY_2 }}

      - name: Build and Push Docker Image to AWS ECR (ap-northeast-2)
        run: |
          IMAGE_NAME=${{ secrets.AWS_ECR_REGISTRY_2 }}/ecr_repo_seoul
          VERSION=$(date +%Y%m%d%H%M%S)

          # Docker 이미지 빌드
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:$VERSION .

          # ECR에 푸시
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$VERSION

      - name: Save the image tag for deployment
        run: echo "IMAGE_TAG=${{ secrets.AWS_ECR_REGISTRY_2 }}/ecr_repo_seoul:$VERSION" >> $GITHUB_ENV

  deploy:
    runs-on: ubuntu-latest
    needs: build  # build 작업이 완료된 후에 deploy 작업을 실행

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials for Deploy
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Grant execute permission for deploy.sh
        run: chmod +x ./ecs/deploy.sh  # 실행 권한 부여

      - name: Deploy to ECS Fargate
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
          ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}
          CONTAINERNAME: ${{ secrets.CONTAINER_NAME }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: ./ecs/deploy.sh

      - name: Deploy to Amazon ECS Fargate using CodeDeploy (ap-northeast-2)
        run: |
          # Create a deployment for ECS Fargate
          aws deploy create-deployment \
            --application-name ${{ secrets.CODEDEPLOY_APPLICATION }} \
            --deployment-group-name ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP }} \
            --revision file://appspec.yml \
            --description "ECS Fargate Blue/Green deployment for ap-northeast-2" \
            --deployment-config-name CodeDeployDefault.ECSCanary10Percent15Minutes
