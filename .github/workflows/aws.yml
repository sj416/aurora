name: CI/CD for Spring Boot with Docker (ECS Fargate + Blue/Green)

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Build Spring Boot Application
        run: ./gradlew build -x test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Log in to AWS ECR (ap-northeast-2)
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY_2 }}

      - name: Build and Push Docker Image to AWS ECR
        id: build-image
        run: |
          IMAGE_NAME=${{ secrets.AWS_ECR_REGISTRY_2 }}/${{ secrets.AWS_ECR_REPOSITORY_2 }}
          VERSION=$(date +%Y%m%d%H%M%S)

          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:$VERSION .
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$VERSION

          # Save image tag for further use
          echo "IMAGE_TAG=${IMAGE_NAME}:${VERSION}" >> $GITHUB_ENV

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials for Deploy
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Download and Update Amazon ECS task definition
        id: task-def
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json

          # Extract only the required fields (removing unnecessary fields)
          jq '.taskDefinition | del(.taskDefinitionArn, .requiresAttributes, .revision, .status, .registeredAt, .registeredBy, .tags)' task-definition.json > new-task-definition.json

          # Update container image in task definition
          jq --arg IMAGE "${{ env.IMAGE_TAG }}" '.containerDefinitions[0].image = $IMAGE' new-task-definition.json > updated-task-definition.json

          # Register the new task definition and get the revision number
          NEW_TASK_DEF=$(aws ecs register-task-definition --cli-input-json file://updated-task-definition.json)
          TASK_REVISION=$(echo $NEW_TASK_DEF | jq -r '.taskDefinition.revision')

          echo "TASK_REVISION=$TASK_REVISION" >> $GITHUB_ENV

      - name: Create Deployment using AWS CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name ${{ secrets.CODEDEPLOY_APPLICATION }} \
            --deployment-group-name ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP }} \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
            --revision revisionType=AppSpecContent,appSpecContent="{\"version\":\"0.0\",\"resources\":[{\"TargetService\":{\"Type\":\"AWS::ECS::Service\",\"Properties\":{\"TaskDefinition\":\"${{ secrets.ECS_TASK_DEFINITION }}:${{ env.TASK_REVISION }}\",\"LoadBalancerInfo\":{\"ContainerName\":\"${{ secrets.CONTAINER_NAME }}\",\"ContainerPort\":8080}}}}]}" \
            --region ap-northeast-2
