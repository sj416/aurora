name: CI/CD for Spring Boot with Docker (ECS Fargate + Blue/Green)

on:
  push:
    branches:
      - master

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Build Spring Boot Application
        run: ./gradlew build -x test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Log in to AWS ECR (ap-northeast-2)
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY_2 }}

      - name: Build and Push Docker Image to AWS ECR
        run: |
          IMAGE_NAME=${{ secrets.AWS_ECR_REGISTRY_2 }}/${{ secrets.AWS_ECR_REPOSITORY_2 }}
          VERSION=$(date +%Y%m%d%H%M%S)

          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:$VERSION .
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$VERSION

          # Save image tag to GITHUB_ENV to pass to next steps
          echo "IMAGE_TAG=${IMAGE_NAME}:latest" >> $GITHUB_ENV

      - name: Download Amazon ECS task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ secrets.ECS_TASK_DEFINITION }} \
            --query taskDefinition > task-definition.json

      - name: Display task definition JSON
        run: |
          cat task-definition.json

      - name: Update task definition with new image
        run: |
          IMAGE_TAG="${{ env.IMAGE_TAG }}"

          # Check if IMAGE_TAG is empty
          if [[ -z "$IMAGE_TAG" ]]; then
            echo "IMAGE_TAG is empty!"
            exit 1
          fi

          # Debug: Display IMAGE_TAG value
          echo "Using IMAGE_TAG: $IMAGE_TAG"

      - name: Modify the task definition using jq
        run: |
          jq --arg image "$IMAGE_TAG" \
             --arg cname "${{ secrets.CONTAINER_NAME }}" \
             'del(.taskDefinitionArn, .revision, .status, .registeredAt, .registeredBy, .compatibilities, .requiresAttributes, .tags) |
              (.containerDefinitions[] | select(.name == $cname) .image) |= $image' \
             task-definition.json > new-task-definition.json

      - name: Debug Verify the new task definition JSON
        run: |
          cat new-task-definition.json
          cat new-task-definition.json | jq .
          ls -l new-task-definition.json

      # Register the new ECS task definition and get the new revision version
      - name: Register the new ECS task definition and get the revision
        id: register-task-def
        run: |
          # Register the task definition
          register_response=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-definition.json)

          # Extract the revision number from the response
          revision=$(echo $register_response | jq -r '.taskDefinition.revision')

          # Output the revision to the GitHub Actions environment for use in CodeDeploy
          echo "TASK_DEFINITION_REVISION=${{ secrets.ECS_TASK_DEFINITION }}:$revision" >> $GITHUB_ENV
          echo "New task definition revision: $revision"

      - name: Check if secrets are set correctly
        run: |
          echo "Task Definition: ${{ secrets.ECS_TASK_DEFINITION }}"
          echo "Container Name: ${{ secrets.CONTAINER_NAME }}"

      - name: Replace placeholders in appspec.json
        run: |
          # Replace placeholders in the appspec.json file with GitHub secrets
          sed -i "s|<TASK_DEFINITION>|${{ env.TASK_DEFINITION_REVISION }}|g" appspec.json
          sed -i "s|<CONTAINER_NAME>|${{ secrets.CONTAINER_NAME }}|g" appspec.json
          cat appspec.json

      - name: Deploy using CodeDeploy (Blue/Green)
        run: |
          aws deploy create-deployment \
            --application-name ${{ secrets.CODEDEPLOY_APPLICATION }} \
            --deployment-group-name ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP }} \
            --revision revisionType=AppSpecContent,appSpecContent="$(echo '{"version":"0.0","Resources":[{"TargetService":{"Type":"AWS::ECS::Service","Properties":{"TaskDefinition":"'"${{ secrets.TASK_DEFINITION }}"':'"${{ env.TASK_DEFINITION_REVISION }}"'","LoadBalancerInfo":{"ContainerName":"'"${{ secrets.CONTAINER_NAME }}"'","ContainerPort":8080}}}}]}'}")" \
            --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes \
            --description "Blue/Green Deployment for ECS Fargate"

