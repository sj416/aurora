name: CI/CD for Spring Boot with Docker (ECS Fargate + Blue/Green)

on:
  push:
    branches:
      - master

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Build Spring Boot Application
        run: ./gradlew build -x test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Log in to AWS ECR (ap-northeast-2)
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY_2 }}

      - name: Build and Push Docker Image to AWS ECR
        run: |
          IMAGE_NAME=${{ secrets.AWS_ECR_REGISTRY_2 }}/${{ secrets.AWS_ECR_REPOSITORY_2 }}
          VERSION=$(date +%Y%m%d%H%M%S)

          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:$VERSION .
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$VERSION

          echo "IMAGE_TAG=${IMAGE_NAME}:latest" >> $GITHUB_ENV

      - name: Download Amazon ECS task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ secrets.ECS_TASK_DEFINITION }} \
            --query taskDefinition > task-definition.json

      - name: Modify the task definition using jq
        run: |
          jq --arg image "$IMAGE_TAG" \
             --arg cname "${{ secrets.CONTAINER_NAME }}" \
             'del(.taskDefinitionArn, .revision, .status, .registeredAt, .registeredBy, .compatibilities, .requiresAttributes, .tags) |
              (.containerDefinitions[] | select(.name == $cname) .image) |= $image' \
             task-definition.json > new-task-definition.json

      - name: Register the new ECS task definition and get the revision
        id: register-task-def
        run: |
          register_response=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-definition.json)
          revision=$(echo $register_response | jq -r '.taskDefinition.revision')
          echo "TASK_DEFINITION_REVISION=${{ secrets.ECS_TASK_DEFINITION }}:$revision" >> $GITHUB_ENV

      - name: Prepare AppSpec JSON for CodeDeploy
        run: |
          TASK_DEFINITION_REVISION=${{ env.TASK_DEFINITION_REVISION }}
          CONTAINER_NAME=${{ secrets.CONTAINER_NAME }}
          cat <<EOF > appspec.json
          {
            "version": "0.0",
            "Resources": [
              {
                "TargetService": {
                  "Type": "AWS::ECS::Service",
                  "Properties": {
                    "TaskDefinition": "$TASK_DEFINITION_REVISION",
                    "LoadBalancerInfo": {
                      "ContainerName": "$CONTAINER_NAME",
                      "ContainerPort": 8080
                    }
                  }
                }
              }
            ]
          }
          EOF

      - name: Debug AppSpec JSON
        run: |
          cat appspec.json | jq .
          echo "Compact JSON Format:"
          cat appspec.json | jq -c .

      - name: Create deployment.json file
        run: |
          APP_SPEC=$(jq -c . < appspec.json)

          cat <<EOF > deployment.json
          {
            "applicationName": "${{ secrets.CODEDEPLOY_APPLICATION }}",
            "deploymentGroupName": "${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP }}",
            "revision": {
              "revisionType": "AppSpecContent",
              "appSpecContent": {
                "content": "{\"version\": \"0.0\", \"Resources\": [{\"TargetService\": {\"Type\": \"AWS::ECS::Service\", \"Properties\": {\"TaskDefinition\": \"$TASK_DEFINITION_REVISION\", \"LoadBalancerInfo\": {\"ContainerName\": \"$CONTAINER_NAME\", \"ContainerPort\": 8080}}}}]}"
              }
            },
            "deploymentConfigName": "CodeDeployDefault.ECSCanary10Percent5Minutes",
            "description": "Blue/Green Deployment for ECS Fargate"
          }
          EOF

          cat deployment.json # 디버깅을 위해 JSON 파일 확인

      - name: Deploy using CodeDeploy (Blue/Green)
        run: |
          aws deploy create-deployment --cli-input-json file://deployment.json
