name: CI/CD for Spring Boot with Docker (ECS Fargate + Blue/Green)

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Build Spring Boot Application
        run: ./gradlew build -x test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Log in to AWS ECR (ap-northeast-2)
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY_2 }}

      - name: Build and Push Docker Image to AWS ECR
        id: build-image
        run: |
          IMAGE_NAME=${{ secrets.AWS_ECR_REGISTRY_2 }}/${{ secrets.AWS_ECR_REPOSITORY_2 }}
          VERSION=$(date +%Y%m%d%H%M%S)

          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:$VERSION .
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$VERSION

          echo "IMAGE_TAG=${IMAGE_NAME}:${VERSION}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${IMAGE_NAME}:${VERSION}" >> $GITHUB_OUTPUT

    outputs:
      IMAGE_TAG: ${{ steps.build-image.outputs.IMAGE_TAG }}


  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials for Deploy
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Verify Image Tag
        run: |
          if [[ -z "${{ needs.build.outputs.IMAGE_TAG }}" ]]; then
            echo "IMAGE_TAG is empty!"
            exit 1
          fi
        env:
          IMAGE_TAG: ${{ needs.build.outputs.IMAGE_TAG }}

      - name: Download Amazon ECS task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ secrets.ECS_TASK_DEFINITION }} \
            --query taskDefinition > task-definition.json

      - name: Update task definition with new image
        run: |
          jq --arg image "${{ needs.build.outputs.IMAGE_TAG }}" \
             --arg cname "${{ secrets.CONTAINER_NAME }}" \
             'del(.taskDefinitionArn, .revision, .status, .registeredAt, .registeredBy, .compatibilities, .requiresAttributes, .tags) |
              (.containerDefinitions[] | select(.name == $cname) .image) |= $image' \
             task-definition.json > new-task-definition.json

          cat new-task-definition.json

      - name: Register new task definition
        id: register-task
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Deploy to ECS Fargate with Blue/Green
        run: |
          aws deploy create-deployment \
            --application-name ${{ secrets.CODEDEPLOY_APPLICATION }} \
            --deployment-group-name ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP }} \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
            --task-definition ${{ env.TASK_DEF_ARN }} \
            --revision revisionType=AppSpecContent,appSpecContent="$(cat appspec.yml | jq -sR .)" \
            --region ap-northeast-2
