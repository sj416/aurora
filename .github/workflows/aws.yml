name: CI/CD for Spring Boot with Docker (ECS Fargate + Blue/Green)

on:
  push:
    branches:
      - master

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Build Spring Boot Application
        run: ./gradlew build -x test

      - name: Configure AWS Credentials (Seoul)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Log in to AWS ECR (Seoul & Tokyo)
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY_2 }}
          aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY_1 }}

      - name: Build and Push Docker Image to AWS ECR
        run: |
          IMAGE_NAME_SEOUL=${{ secrets.AWS_ECR_REGISTRY_2 }}/${{ secrets.AWS_ECR_REPOSITORY_2 }}
          IMAGE_NAME_TOKYO=${{ secrets.AWS_ECR_REGISTRY_1 }}/${{ secrets.AWS_ECR_REPOSITORY_1 }}
          VERSION=$(date +%Y%m%d%H%M%S)

          docker build -t $IMAGE_NAME_SEOUL:latest -t $IMAGE_NAME_SEOUL:$VERSION .
          docker build -t $IMAGE_NAME_TOKYO:latest -t $IMAGE_NAME_TOKYO:$VERSION .

          docker push $IMAGE_NAME_SEOUL:latest
          docker push $IMAGE_NAME_SEOUL:$VERSION
          docker push $IMAGE_NAME_TOKYO:latest
          docker push $IMAGE_NAME_TOKYO:$VERSION

          echo "IMAGE_TAG_SEOUL=${IMAGE_NAME_SEOUL}:latest" >> $GITHUB_ENV
          echo "IMAGE_TAG_TOKYO=${IMAGE_NAME_TOKYO}:latest" >> $GITHUB_ENV

      - name: Download ECS Task Definition (Seoul & Tokyo)
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ secrets.ECS_TASK_DEFINITION_2 }} \
            --region ap-northeast-2 \
            --query taskDefinition > task-definition-seoul.json

          aws ecs describe-task-definition \
            --task-definition ${{ secrets.ECS_TASK_DEFINITION_1 }} \
            --region ap-northeast-1 \
            --query taskDefinition > task-definition-tokyo.json

      - name: Modify the ECS Task Definition using jq (Seoul)
        run: |
          jq --arg image "$IMAGE_TAG_SEOUL" --arg cname "${{ secrets.CONTAINER_NAME_2 }}" \
             'del(.taskDefinitionArn, .revision, .status, .registeredAt, .registeredBy, .compatibilities, .requiresAttributes, .tags) |
              (.containerDefinitions[] | select(.name == $cname) .image) |= $image' \
             task-definition-seoul.json > new-task-definition-seoul.json

      - name: Modify the ECS Task Definition using jq (Tokyo)
        run: |
          jq --arg image "$IMAGE_TAG_TOKYO" --arg cname "${{ secrets.CONTAINER_NAME_1 }}" \
             'del(.taskDefinitionArn, .revision, .status, .registeredAt, .registeredBy, .compatibilities, .requiresAttributes, .tags) |
              (.containerDefinitions[] | select(.name == $cname) .image) |= $image' \
             task-definition-tokyo.json > new-task-definition-tokyo.json

      - name: Register the new ECS task definition and get the revision (Seoul)
        id: register-task-def-seoul
        run: |
          register_response_seoul=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-definition-seoul.json \
            --region ap-northeast-2)  # 서울 리전 명확하게 지정

          revision_seoul=$(echo $register_response_seoul | jq -r '.taskDefinition.revision')

          echo "TASK_DEFINITION_REVISION_SEOUL=${{ secrets.ECS_TASK_DEFINITION_ARN_2 }}/${{ secrets.ECS_TASK_DEFINITION_2 }}:$revision_seoul" >> $GITHUB_ENV

      - name: Register the new ECS task definition and get the revision (Tokyo)
        id: register-task-def-tokyo
        run: |
          register_response_tokyo=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-definition-tokyo.json \
            --region ap-northeast-1)  # 도쿄 리전 명확하게 지정

          revision_tokyo=$(echo $register_response_tokyo | jq -r '.taskDefinition.revision')

          echo "TASK_DEFINITION_REVISION_TOKYO=${{ secrets.ECS_TASK_DEFINITION_ARN_1 }}/${{ secrets.ECS_TASK_DEFINITION_1 }}:$revision_tokyo" >> $GITHUB_ENV

      - name: Deploy using CodeDeploy (Seoul & Tokyo)
        run: |
          aws deploy create-deployment \
            --application-name ${{ secrets.CODEDEPLOY_APPLICATION_2 }} \
            --deployment-group-name ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP_2 }} \
            --revision "{\"revisionType\":\"AppSpecContent\",\"appSpecContent\":{\"content\":\"{\\\"version\\\":\\\"0.0\\\",\\\"Resources\\\":[{\\\"TargetService\\\":{\\\"Type\\\":\\\"AWS::ECS::Service\\\",\\\"Properties\\\":{\\\"TaskDefinition\\\":\\\"arn:aws:ecs:ap-northeast-2:${{ secrets.AWS_ACCOUNT_ID }}:task-definition/${{ env.TASK_DEFINITION_REVISION_SEOUL }}\\\",\\\"LoadBalancerInfo\\\":{\\\"ContainerName\\\":\\\"${{ secrets.CONTAINER_NAME_2 }}\\\",\\\"ContainerPort\\\":8080}}}}]}\"}}" \
            --deployment-config-name "CodeDeployDefault.ECSCanary10Percent5Minutes" \
            --description "Blue/Green Deployment for ECS Fargate in Seoul" \
            --region ap-northeast-2   # ✅ 서울 리전 명확하게 지정

          aws deploy create-deployment \
            --application-name ${{ secrets.CODEDEPLOY_APPLICATION_1 }} \
            --deployment-group-name ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP_1 }} \
            --revision "{\"revisionType\":\"AppSpecContent\",\"appSpecContent\":{\"content\":\"{\\\"version\\\":\\\"0.0\\\",\\\"Resources\\\":[{\\\"TargetService\\\":{\\\"Type\\\":\\\"AWS::ECS::Service\\\",\\\"Properties\\\":{\\\"TaskDefinition\\\":\\\"arn:aws:ecs:ap-northeast-1:${{ secrets.AWS_ACCOUNT_ID }}:task-definition/${{ env.TASK_DEFINITION_REVISION_TOKYO }}\\\",\\\"LoadBalancerInfo\\\":{\\\"ContainerName\\\":\\\"${{ secrets.CONTAINER_NAME_1 }}\\\",\\\"ContainerPort\\\":8080}}}}]}\"}}" \
            --deployment-config-name "CodeDeployDefault.ECSCanary10Percent5Minutes" \
            --description "Blue/Green Deployment for ECS Fargate in Tokyo" \
            --region ap-northeast-1   # ✅ 도쿄 리전 명확하게 지정
      
